# Default values for compute-gardener-scheduler
# This is a YAML-formatted file

# Note: Use Helm's --namespace and --create-namespace flags
# to specify the installation namespace (suggested namespace: "compute-gardener")

# General scheduler configuration
scheduler:
  # Scheduler mode: "secondary" (default) or "primary"
  # - secondary: runs alongside default scheduler, only handles pods that explicitly set schedulerName
  # - primary: acts as the default scheduler for all pods (not recommended for general use)
  mode: "secondary"
  name: compute-gardener-scheduler
  image: docker.io/dmasselink/compute-gardener-scheduler:v0.2.2-ea898cc
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  leaderElect: false
  # Maximum time to delay pod scheduling when waiting for better conditions (price or carbon)
  maxSchedulingDelay: "24h"
  # Log verbosity level (0-5)
  logLevel: 1
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  nodeSelector:
    node-role.kubernetes.io/control-plane: "true"
  affinity: {}
  tolerations: []
  priorityClassName: ""

  # Probe configuration
  probes:
    livenessProbe:
      initialDelaySeconds: 15
    readinessProbe:
      initialDelaySeconds: 15

# Carbon-aware scheduling configuration
carbonAware:
  enabled: true
  carbonIntensityThreshold: 200.0
  electricityMap:
    apiKey: "YOUR_ELECTRICITY_MAP_API_KEY" # Change this or use --set-string
    # Additional electricity map settings can be added here

# Price-aware scheduling configuration
priceAware:
  enabled: false
  provider: "tou" # Time of Use
  schedules:
    # Default TOU schedule for all nodes
    # Currently, all nodes follow this schedule unless node annotation support is implemented
    - name: "california-pge" # Unique name for this schedule
      dayOfWeek: "1-5" # Monday-Friday (1-5)
      startTime: "16:00" # Start of peak period (4pm)
      endTime: "21:00" # End of peak period (9pm)
      timezone: "America/Los_Angeles" # IANA timezone identifier
      # Rates are optional and only used for metrics/reporting
      peakRate: 0.30 # Peak rate in $/kWh
      offPeakRate: 0.10 # Off-peak rate in $/kWh

    # Additional schedules will be supported in the future:
    # In the current implementation, only the first schedule is used for all nodes.
    # Future versions will support node-specific schedule assignment via annotations.
    #
    # Examples of additional schedule formats for future use:
    #
    # - name: "california-pge-weekend"
    #   dayOfWeek: "0,6"                # Saturday-Sunday (0,6)
    #   startTime: "13:00"              # 1pm
    #   endTime: "19:00"                # 7pm
    #   timezone: "America/Los_Angeles"
    #   peakRate: 0.20
    #   offPeakRate: 0.10
    #
    # - name: "new-york-coned"
    #   dayOfWeek: "1-5"                # Monday-Friday
    #   startTime: "14:00"              # 2pm
    #   endTime: "20:00"                # 8pm
    #   timezone: "America/New_York"
    #   peakRate: 0.25
    #   offPeakRate: 0.08

# Metrics configuration
metrics:
  # Set to false to disable all metrics-related resources (Service and ServiceMonitor)
  # This avoids dependencies on Prometheus Operator CRDs for simple installations
  enabled: true
  port: 10259
  service:
    enabled: true
    port: 10259
  serviceMonitor:
    enabled: true
    # Default Prometheus namespace, change to match your setup (ex: cattle-monitoring-system with Rancher)
    namespace: "monitoring"
    interval: "15s" # Match the node exporter's sampling interval
    insecureSkipVerify: true # For testing only, consider proper CA verification in prod
  # Set to true for GKE to use PodMonitoring instead of ServiceMonitor
  gke: false

  # Prometheus configuration for metrics collection
  prometheus:
    # Prometheus server URL - REQUIRED for GPU power metrics
    # This URL follows standard Prometheus Operator conventions. You may need to adjust
    # based on your cluster's specific Prometheus installation:
    # - Standard Prometheus Operator: http://prometheus-operated.monitoring.svc.cluster.local:9090
    # - Rancher Monitoring: http://prometheus-operated.cattle-monitoring-system.svc.cluster.local:9090
    # - Cloud provider managed: Check your cloud provider's documentation
    url: "http://prometheus-operated.monitoring.svc.cluster.local:9090"
    # Query timeout for Prometheus queries (default: 30s)
    queryTimeout: "30s"
    # Whether to use DCGM metrics (default: true)
    useDCGM: true
    # DCGM power metric name (default: DCGM_FI_DEV_POWER_USAGE)
    # This assumes DCGM exporter is configured with standard metric names
    dcgmPowerMetric: "DCGM_FI_DEV_POWER_USAGE"

  # GPU metrics configuration
  gpuMetrics:
    # Enable GPU metrics collection
    enabled: true
    # Set to true if GPU metrics exporter is already installed externally
    external: false
    # Configuration for GPU metrics exporter (using industry-standard DCGM)
    image: "nvcr.io/nvidia/k8s/dcgm-exporter:2.4.6-2.6.10-ubuntu20.04"
    # GPU metrics exporter port
    port: 9400
    # Metrics endpoint for Prometheus when using external GPU metrics exporter
    # For internal installation, will be constructed based on service name
    endpoint: "http://dcgm-exporter.monitoring:9400/metrics"
    # Whether to deploy ServiceMonitor for GPU metrics exporter
    serviceMonitor:
      enabled: true
      interval: "15s"

# Sample pod to demonstrate scheduler usage
samplePod:
  # When enabled, creates a sample pod that demonstrates scheduler functionality
  # The pod also helps validate metrics collection with a longer-running workload
  # If you see "Zero or negative energy value" warnings in logs, the pod may not
  # have run long enough to collect meaningful metrics
  enabled: true
  image: "busybox:latest"

# Hardware profiles for power estimation
hardwareProfiles:
  enabled: true
  mountPath: "/etc/kubernetes/compute-gardener-scheduler/hardware-profiles"

# Additional plugin configuration
plugins:
  # Can be expanded with further plugin-specific configuration
  pluginConfig: []
